#Использовать gitrunner
#Использовать tempfiles

Перем Лог;
Перем КаталогПроекта;


Процедура ВыполнитьСборкуEXE(КаталогУстановки)

	Лог.Информация("Выполнение создания exe  в <%1>", КаталогУстановки);

	ФайлПриложения = ОбъединитьПути(КаталогУстановки, "gitsync", "src/cmd", "gitsync.os");
	ВыходнойФайл = ОбъединитьПути(КаталогПроекта, "bin", "gitsync.exe");

	КомандаOpm = Новый Команда;
	КомандаOpm.УстановитьРабочийКаталог(КаталогУстановки);
	КомандаOpm.УстановитьКоманду("oscript");
	КомандаOpm.ДобавитьПараметр("-make");
	КомандаOpm.ДобавитьПараметр(ФайлПриложения);
	КомандаOpm.ДобавитьПараметр(ВыходнойФайл);
	КомандаOpm.ПоказыватьВыводНемедленно(Истина);

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0  Тогда
		ВызватьИсключение "";
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьПлагины(Знач КаталогУстановки, КаталогПлагинов)

	КаталогВнутреннихКлассов = ОбъединитьПути(КаталогУстановки, "gitsync", "src/core/Классы/internal/Классы");

	ПодготовитьФайлИндексПлагиновEXE(КаталогВнутреннихКлассов, КаталогПлагинов);

КонецПроцедуры

Процедура ПодготовитьФайлИндексПлагиновEXE(Знач КаталогВнутреннихКлассов, Знач КаталогПлагинов)

	МассивПлагинов = ПолучитьМассивПлагинов(КаталогПлагинов);

	ФайлИндексПлагиновEXE = ОбъединитьПути(КаталогВнутреннихКлассов, "ПодключениеЗапакованныхПлагинов.os");

	ЗаписьТекста = Новый ЗаписьТекста(ФайлИндексПлагиновEXE);

	КаталогиПлагинов = НайтиФайлы(КаталогПлагинов, ПолучитьМаскуВсеФайлы(), Ложь);

	ЗаписьТекста.ЗаписатьСтроку(СтрШаблон("#Использовать ""%1""", КаталогПлагинов));

	ЗаписьТекста.ЗаписатьСтроку("Функция ИндексПлагинов() Экспорт");
	ЗаписьТекста.ЗаписатьСтроку("	ИндексПлагинов = Новый Массив;");

	Для каждого ИмяПлагина Из МассивПлагинов Цикл
		ЗаписьТекста.ЗаписатьСтроку(СтрШаблон("	ИндексПлагинов.Добавить(""%1"");", ИмяПлагина));
	КонецЦикла;

	ЗаписьТекста.ЗаписатьСтроку("	Возврат ИндексПлагинов;");
	ЗаписьТекста.ЗаписатьСтроку("КонецФункции");

	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ПолучитьМассивПлагинов(Знач КаталогПлагинов)

	Лог.Отладка("Обновление индекса плагина из каталога <%1>", КаталогПлагинов);
	МассивПлагинов = Новый Массив;

	КаталогиПлагинов = НайтиФайлы(КаталогПлагинов, ПолучитьМаскуВсеФайлы(), Ложь);

	ПрочитатьПлагин(ОбъединитьПути(КаталогПроекта, "src"), МассивПлагинов);

	Лог.Отладка("В индекс плагинов добавлено <%1> плагинов", МассивПлагинов.Количество());

	Возврат МассивПлагинов;

КонецФункции

Процедура ПрочитатьПлагин(Знач Путь, МассивПлагинов)

	Лог.Отладка("Загружаю плагины из каталога <%1>", Путь);

	ОбработатьСтруктуруКаталоговПоСоглашению(Путь, МассивПлагинов);

КонецПроцедуры


Процедура ОбработатьСтруктуруКаталоговПоСоглашению(Путь, МассивПлагинов)
	
	КаталогиКлассов = Новый Массив;
	КаталогиКлассов.Добавить(ОбъединитьПути(Путь, "Классы"));
	КаталогиКлассов.Добавить(ОбъединитьПути(Путь, "Classes"));
	КаталогиКлассов.Добавить(ОбъединитьПути(Путь, "src", "Классы"));
	КаталогиКлассов.Добавить(ОбъединитьПути(Путь, "src", "Classes"));

	Для Каждого мКаталог Из КаталогиКлассов Цикл

		ОбработатьКаталогКлассов(мКаталог, МассивПлагинов);

	КонецЦикла;


КонецПроцедуры

Процедура ОбработатьКаталогКлассов(Знач Путь, МассивПлагинов)

	КаталогКлассов = Новый Файл(Путь);
	
	Если КаталогКлассов.Существует() Тогда
		Файлы = НайтиФайлы(КаталогКлассов.ПолноеИмя, "*.os");
		Для Каждого Файл Из Файлы Цикл
			Сообщить(СтрШаблон("	класс (по соглашению) %1, файл %2", Файл.ИмяБезРасширения, Файл.ПолноеИмя));
			СтандартнаяОбработка = Ложь;
			// ДобавитьКласс(Файл.ПолноеИмя, Файл.ИмяБезРасширения);
	
			МассивПлагинов.Добавить(Файл.ИмяБезРасширения);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолезнаяРабота()

	КаталогСборки = ВременныеФайлы.СоздатьКаталог();
	КаталогУстановки = ОбъединитьПути(КаталогПроекта, "bin");


	ПодготовитьПлагины(КаталогУстановки, КаталогПроекта);

	ВыполнитьСборкуEXE(КаталогУстановки);

	ВременныеФайлы.УдалитьФайл(КаталогСборки);
	//ВременныеФайлы.УдалитьФайл(КаталогУстановки);

КонецПроцедуры


ФайлКаталогПроекта = Новый Файл(ОбъединитьПути(ТекущийСценарий().Каталог, ".."));
КаталогПроекта = ФайлКаталогПроекта.ПолноеИмя;

Лог = Логирование.ПолучитьЛог("task.install-opm");
// Лог.УстановитьУровень(УровниЛОга.отладка);

ПолезнаяРабота();
